/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import model.ProductManagement.Product;
import model.Supplier.Supplier;

/**
 *
 * @author bryant
 */
public class PriceAdjustmentJPanel extends javax.swing.JPanel {
    JPanel workArea;
    Supplier supplier;
    Product product;
    private Map<Product, Double> originalPrices = new HashMap<>();
    private Map<Product, Double> adjustedPrices = new HashMap<>();
    

    /**
     * Creates new form PriceJPanel
     */
    public PriceAdjustmentJPanel() {
        
    }

    PriceAdjustmentJPanel(JPanel workArea, Supplier supplier) {
        initComponents();
        this.workArea = workArea;
        this.supplier = supplier;
        this.product  = product;
        initializePrices(); // Initialize price maps
        setupTable(); // Setup table structure
        populateTable();
      
    }
    private void initializePrices() {
        if (supplier != null && supplier.getProductCatalog() != null) {
            for (Product product : supplier.getProductCatalog().getProductList()) {
                originalPrices.put(product, (double)product.getTargetPrice());
                adjustedPrices.put(product, (double)product.getTargetPrice());
            }
        }
    }
    private void setupTable() {
        // Set up table model with proper column names
        String[] columnNames = {"Product", "Current Price"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make table cells non-editable
            }
        };
        PriceTable.setModel(model);

        // Set column widths
        PriceTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        PriceTable.getColumnModel().getColumn(1).setPreferredWidth(100);

        // Set selection mode
        PriceTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtShowPrice = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btmGoToResult = new javax.swing.JToggleButton();
        PriceLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PriceTable = new javax.swing.JTable();
        btmRaise = new javax.swing.JToggleButton();
        btmLower = new javax.swing.JToggleButton();
        txtRaise = new javax.swing.JTextField();
        txtLower = new javax.swing.JTextField();
        btmShowPrice = new javax.swing.JToggleButton();

        btnBack.setText("< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btmGoToResult.setText("Simulation Result");
        btmGoToResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmGoToResultActionPerformed(evt);
            }
        });

        PriceLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        PriceLabel.setText("Price Adjustment");

        PriceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Product", "Price"
            }
        ));
        jScrollPane1.setViewportView(PriceTable);

        btmRaise.setText("Raise");
        btmRaise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmRaiseActionPerformed(evt);
            }
        });

        btmLower.setText("Lower");
        btmLower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmLowerActionPerformed(evt);
            }
        });

        txtRaise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRaiseActionPerformed(evt);
            }
        });

        btmShowPrice.setText("Show Current Price");
        btmShowPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmShowPriceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnBack)
                        .addGap(186, 186, 186)
                        .addComponent(PriceLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btmShowPrice)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btmRaise)
                                .addComponent(btmLower)))
                        .addGap(121, 121, 121)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRaise, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(txtLower)
                            .addComponent(txtShowPrice)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(btmGoToResult)))
                .addContainerGap(241, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 133, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PriceLabel)
                    .addComponent(btnBack))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btmRaise)
                    .addComponent(txtRaise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btmLower)
                    .addComponent(txtLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btmShowPrice)
                    .addComponent(txtShowPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addComponent(btmGoToResult)
                .addContainerGap(77, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout)workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btmGoToResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmGoToResultActionPerformed
        // TODO add your handling code here:
        System.out.println("Original Prices: " + originalPrices.size());
        System.out.println("Adjusted Prices: " + adjustedPrices.size());
     SimulationPanel simulationPanel = new SimulationPanel(workArea, supplier, originalPrices, adjustedPrices);
        workArea.add(simulationPanel, "SimulationPanel");
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.show(workArea, "SimulationPanel");
    }//GEN-LAST:event_btmGoToResultActionPerformed

    private void btmRaiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmRaiseActionPerformed
        // TODO add your handling code here:
         int selectedRow = PriceTable.getSelectedRow();
    if (selectedRow != -1) {
        try {
            double raiseValue = Double.parseDouble(txtRaise.getText());
            if (raiseValue <= 0) {
                JOptionPane.showMessageDialog(this, "Please enter a positive value");
                return;
            }

            // Get the selected product
            Product selectedProduct = supplier.getProductCatalog().getProductList().get(selectedRow);
            
            // Get current price
            double currentPrice = adjustedPrices.get(selectedProduct);
            double newPrice = currentPrice + raiseValue;

            // Update adjusted prices map
            adjustedPrices.put(selectedProduct, newPrice);
            
            // Update table display
            PriceTable.setValueAt(String.format("%.2f", newPrice), selectedRow, 1);
            
            // Show current price
            txtShowPrice.setText(String.format("%.2f", newPrice));
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a product");
    }
    }//GEN-LAST:event_btmRaiseActionPerformed

    private void btmLowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmLowerActionPerformed
        // TODO add your handling code here:
        int selectedRow = PriceTable.getSelectedRow();
    if (selectedRow != -1) {
        try {
            double lowerValue = Double.parseDouble(txtLower.getText());
            if (lowerValue <= 0) {
                JOptionPane.showMessageDialog(this, "Please enter a positive value");
                return;
            }

            // Get the selected product
            Product selectedProduct = supplier.getProductCatalog().getProductList().get(selectedRow);
            
            // Get current price
            double currentPrice = adjustedPrices.get(selectedProduct);
            double newPrice = currentPrice - lowerValue;

            // Check if new price is below floor price
            if (newPrice < selectedProduct.getFloorPrice()) {
                JOptionPane.showMessageDialog(this, 
                    "Price cannot be lower than floor price: $" + selectedProduct.getFloorPrice());
                return;
            }

            // Update adjusted prices map
            adjustedPrices.put(selectedProduct, newPrice);
            
            // Update table display
            PriceTable.setValueAt(String.format("%.2f", newPrice), selectedRow, 1);
            
            // Show current price
            txtShowPrice.setText(String.format("%.2f", newPrice));
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a product");
    }
    }//GEN-LAST:event_btmLowerActionPerformed

    private void txtRaiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRaiseActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_txtRaiseActionPerformed

    private void btmShowPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmShowPriceActionPerformed
        // TODO add your handling code here:
        int selectedRow = PriceTable.getSelectedRow();
        if (selectedRow != -1) {
            String currentPrice = (String) PriceTable.getValueAt(selectedRow, 1);
            txtShowPrice.setText(currentPrice);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product");
        }
    }//GEN-LAST:event_btmShowPriceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PriceLabel;
    private javax.swing.JTable PriceTable;
    private javax.swing.JToggleButton btmGoToResult;
    private javax.swing.JToggleButton btmLower;
    private javax.swing.JToggleButton btmRaise;
    private javax.swing.JToggleButton btmShowPrice;
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtLower;
    private javax.swing.JTextField txtRaise;
    private javax.swing.JTextField txtShowPrice;
    // End of variables declaration//GEN-END:variables

   private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) PriceTable.getModel();
        model.setRowCount(0); // Clear existing rows

        if (supplier != null && supplier.getProductCatalog() != null) {
            for (Product product : supplier.getProductCatalog().getProductList()) {
                double currentPrice = adjustedPrices.get(product);
                Object[] row = new Object[2];
                row[0] = product.toString(); // Product name
                row[1] = String.format("%.2f", currentPrice); // Formatted price
                model.addRow(row);
            }
        }
    }
}
