/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.ProductManagement.Product;
import model.Supplier.Supplier;





/**
 *
 * @author bryant
 */
public class ProfitMaximizationJPanel extends javax.swing.JPanel {
    JPanel workArea;
    Supplier supplier;
    Product product; 

    /**
     * Creates new form ProfitMaximizationJPanel
     */
    public ProfitMaximizationJPanel(JPanel workArea, Supplier supplier) {
        initComponents();
        this.workArea = workArea;
        this.supplier = supplier;
        setPreferredSize(new Dimension(800, 800));
        populateInitialTable(); // Add method to populate initial table
    }
    public ProfitMaximizationJPanel() {
        initComponents();
    }

    
    class ProfitMaximizationResult {
    private String productName;
    private double currentPrice;
    private double sales;
    private double margins;
    private double profitability;

    // 构造器
    public ProfitMaximizationResult(String productName, double currentPrice, double sales, double margins, double profitability) {
        this.productName = productName;
        this.currentPrice = currentPrice;
        this.sales = sales;
        this.margins = margins;
        this.profitability = profitability;
    }

    // Getters
    public String getProductName() { return productName; }
    public double getCurrentPrice() { return currentPrice; }
    public double getSales() { return sales; }
    public double getMargins() { return margins; }
    public double getProfitability() { return profitability; }

    // Setters
    public void setProductName(String productName) { this.productName = productName; }
    public void setCurrentPrice(double currentPrice) { this.currentPrice = currentPrice; }
    public void setSales(double sales) { this.sales = sales; }
    public void setMargins(double margins) { this.margins = margins; }
    public void setProfitability(double profitability) { this.profitability = profitability; }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProfitLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProfitMaxTable = new javax.swing.JTable();
        btmMax = new javax.swing.JToggleButton();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        MaxTable = new javax.swing.JTable();

        ProfitLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        ProfitLabel.setText("Profit maximization");

        ProfitMaxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product", "Current Price", "Sales", "Margins ", "Profitability "
            }
        ));
        jScrollPane1.setViewportView(ProfitMaxTable);

        btmMax.setText("Calculate Max Profit");
        btmMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmMaxActionPerformed(evt);
            }
        });

        btnBack.setText("< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        MaxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product", "Current Price", "Sales", "Margins ", "Profitability "
            }
        ));
        jScrollPane2.setViewportView(MaxTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(208, 208, 208)
                                .addComponent(btmMax))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(ProfitLabel)))
                .addContainerGap(207, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btnBack)
                .addGap(3, 3, 3)
                .addComponent(ProfitLabel)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btmMax)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btmMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmMaxActionPerformed
        // TODO add your handling code here:
        
    System.out.println("Calculate Max Profit button clicked");
    calculateAndDisplayMaxProfit(); 
    }//GEN-LAST:event_btmMaxActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
    CardLayout layout = (CardLayout)workArea.getLayout();
    layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed


    private ArrayList<ProfitMaximizationResult> calculateProfitMaximization() {
    ArrayList<ProfitMaximizationResult> results = new ArrayList<>();
    
    // 这只是一个示例逻辑。您应该根据您的要求替换它为实际的利润最大化计算逻辑。
    
    // 假设我们有一些产品及其价格和销售量
    String[] products = {"A", "B", "C"};
    double[] prices = {100.0, 150.0, 200.0};
    int[] sales = {120, 80, 60};

    // 仅供演示的虚拟计算
    for (int i = 0; i < products.length; i++) {
        double profitMargin = prices[i] * sales[i] * 0.2; // 虚构的利润率计算
        double profitability = profitMargin / (prices[i] * sales[i]); // 虚构的盈利能力计算
        results.add(new ProfitMaximizationResult(products[i], prices[i], sales[i], profitMargin, profitability));
    }

    return results;
}

// ...类的其余代码...



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MaxTable;
    private javax.swing.JLabel ProfitLabel;
    private javax.swing.JTable ProfitMaxTable;
    private javax.swing.JToggleButton btmMax;
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
private void populateInitialTable() {
    DefaultTableModel model = (DefaultTableModel) ProfitMaxTable.getModel();
    model.setRowCount(0);  // Clear existing rows
    
    if (supplier != null && supplier.getProductCatalog() != null) {
        for (Product product : supplier.getProductCatalog().getProductList()) {
            double currentPrice = product.getTargetPrice();
            int salesVolume = product.getSalesVolume();
            double costPrice = product.getFloorPrice();
            
            // Calculate metrics
            double sales = currentPrice * salesVolume;
            double margins = (currentPrice - costPrice) * salesVolume;
            double profitability = (margins / sales) * 100;
            
            Object[] row = new Object[5];
            row[0] = product.getName();// Product
            row[1] = String.format("$%.2f", currentPrice);  // Current Price
            row[2] = String.format("$%.2f", sales);  // Sales
            row[3] = String.format("$%.2f", margins);  // Margins
            row[4] = String.format("%.2f%%", profitability);  // Profitability
            
            model.addRow(row);
        }
    }
    
    // Set up the MaxTable (optimization results table)
    DefaultTableModel maxModel = (DefaultTableModel) MaxTable.getModel();
    maxModel.setRowCount(0);  // Clear existing rows
    
    // Set column headers
    String[] columnNames = {
        "Product",
        "Current Price",
        "Sales",
        "Margins",
        "Profitability"
    };
    
    for (int i = 0; i < columnNames.length; i++) {
        ProfitMaxTable.getColumnModel().getColumn(i).setHeaderValue(columnNames[i]);
        MaxTable.getColumnModel().getColumn(i).setHeaderValue(columnNames[i]);
    }
    
    // Adjust column widths for both tables
    for (javax.swing.JTable table : new javax.swing.JTable[]{ProfitMaxTable, MaxTable}) {
        table.getColumnModel().getColumn(0).setPreferredWidth(150);   // Product
        table.getColumnModel().getColumn(1).setPreferredWidth(100);  // Current Price
        table.getColumnModel().getColumn(2).setPreferredWidth(100);  // Sales
        table.getColumnModel().getColumn(3).setPreferredWidth(100);  // Margins
        table.getColumnModel().getColumn(4).setPreferredWidth(100);  // Profitability
    }
}


// Helper method to calculate maximum profit scenario
private void calculateAndDisplayMaxProfit() {
        DefaultTableModel maxModel = (DefaultTableModel) MaxTable.getModel();
        maxModel.setRowCount(0); // Clear the max table
        
        if (supplier != null && supplier.getProductCatalog() != null) {
            Product bestProduct = null;
            double maxProfitability = -1;
            double bestPrice = 0;
            double bestSales = 0;
            double bestMargins = 0;
            
            // Find the product with highest profitability
            for (Product product : supplier.getProductCatalog().getProductList()) {
                // Get price ranges
                int floorPrice = product.getFloorPrice();
                int ceilingPrice = product.getCeilingPrice();
                int currentPrice = product.getTargetPrice();
                int salesVolume = product.getSalesVolume();
                
                // Calculate metrics
                double sales = currentPrice * salesVolume;
                double margins = (currentPrice - floorPrice) * salesVolume;
                double profitability = (sales > 0) ? (margins / sales) * 100 : 0;
                
                if (profitability > maxProfitability) {
                    maxProfitability = profitability;
                    bestProduct = product;
                    bestPrice = currentPrice;
                    bestSales = sales;
                    bestMargins = margins;
                }
            }
            
            // Display the best performing product
            if (bestProduct != null) {
                Object[] row = new Object[5];
                row[0] = bestProduct.toString();
                row[1] = String.format("$%.2f", bestPrice);
                row[2] = String.format("$%.2f", bestSales);
                row[3] = String.format("$%.2f", bestMargins);
                row[4] = String.format("%.2f%%", maxProfitability);
                maxModel.addRow(row);
                
                // Optional: Show a message with the results
                String message = String.format("Most profitable product found:\n" +
                        "Product: %s\n" +
                        "Profitability: %.2f%%\n" +
                        "Sales: $%.2f\n" +
                        "Margins: $%.2f",
                        bestProduct.toString(), maxProfitability, bestSales, bestMargins);
                JOptionPane.showMessageDialog(this, message, "Profit Maximization Results", 
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
}
}